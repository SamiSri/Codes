import cv2
import os
import numpy as np

def crop_white_edges(image):
    # Convert image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Threshold to create a mask of the white areas
    _, mask = cv2.threshold(gray, 240, 255, cv2.THRESH_BINARY)

    # Invert the mask
    mask = cv2.bitwise_not(mask)

    # Get contours of the mask
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    if not contours:
        return image  # Return original image if no contours are found

    # Initialize variables to find the combined bounding box
    min_x, min_y = image.shape[1], image.shape[0]
    max_x, max_y = 0, 0

    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)
        min_x = min(min_x, x)
        min_y = min(min_y, y)
        max_x = max(max_x, x + w)
        max_y = max(max_y, y + h)

    # Crop the image using the combined bounding box
    cropped_image = image[min_y:max_y, min_x:max_x]

    return cropped_image

# Input and output directories
input_folder = 'C:\\Py images'
output_folder = 'C:\\Py images\\cropped'

# Create output folder if it doesn't exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Iterate through all images in the input folder
for filename in os.listdir(input_folder):
    if filename.endswith(('.jpg', '.jpeg', '.png')):
        # Read the input image
        input_path = os.path.join(input_folder, filename)
        image = cv2.imread(input_path)

        if image is None:
            print(f"Failed to read {filename}. Skipping.")
            continue

        # Crop white edges
        cropped_image = crop_white_edges(image)

        # Save the cropped image in the output folder with the same filename
        output_path = os.path.join(output_folder, filename)
        cv2.imwrite(output_path, cropped_image)

        print(f"Cropped and saved {filename}.")

print("All images processed successfully.")
